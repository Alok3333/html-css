CSS - Cascading Style Sheet.
    The css has collection of property and values. This property & value use to change
    look and feel of webpage.

=> How it work?
    Responsive webpage = HTML(tags) + CSS(property & values)

=> Method to write CSS?
    ->Total using 4 methods
        1. inline css - (very very less in use)
        2. internal css
        3. external css
        4. import css - (very very less in use)

=> Syntax for inline CSS ?
    <tagname style="property: value; property: value;">
        Contents to display
    </tagname>

    Ex :- 
        <p style="color: red; height:200px; width: 400px; background: red;">
            welcome to bangalore
        </p>

    Note :- Before : is property and after : is value
--------------------------
    List of property
        height - 3 methods
            =>height: 100px; - it fixed for min and max
            =>min-height: 100px; - The min height fixed & max is based on contents
            =>height: auto; - its fully based on contents

        width - 4 methods
            =>width: 150px; - it's fixed
            =>width: 20%; - it is based on screen width
            =>min-width: 20px or % - it use to set min width for element 
            =>max-width: 20% or px - it use to set max width for element

        background - 9 methods
            =>background: red;
            =>background-color: red;
            =>background-color: rgb(100, 200, 50);
            =>background-color: rgba(100, 200, 50, 0.5)
            =>background-image: url("1.jpg");
            =>background-image: linear-gradient(red, blue, green);
            =>background-image: linear-gradient(to left, red, blue, green);
            =>background-image: linear-gradient(to right, red, blue, green);
            =>background-image: linear-gradient(to top, red, blue, green);
            =>background-image: linear-gradient(to bottom, red, blue, green);

        float - it use to convert from block level tag to inline tag
            float: left; - it prints left to right in same line
            float: right; - it prints right to left in same line

        margin - it apply space outside of the tag
            margin: auto; - it print in center of area
            margin: 30px; - it apply 30px gap from all side
            margin-left: 30px; - it apply 30px gap from left side
            margin-right: 40px; - it apply 40px gap from right side
            margin-bottom: 20px; - it apply 20px gap from bottom side
            margin-top: 30px; - it apply 30px gap from top side
            margin: top left-right bottom - short code

        padding - it apply space inside of container
            padding: 10px; - it aaply 10px gap from all side
            padding-top: 10px;
            padding-left: 10px;
            padding-right: 10px;
            padding-bottom: 10px;
            padding: top left-right bottom;

        Note - padding apply space inside of container
               where margin apply space outside of container
------------------------------------------------------

    => In inline css ?
        ->It is 1 to 1 - write css code 1 time and use max 1 time in html.
        ->Because of 1 to 1, code duplicate will happen
        ->If code is duplicate then file modification may be complex.
        ->File weight will increase.
        ->It consume more internet data.
        ->Page loading may take long time.
        ->User experience may be bad.
        ->Google reject from google search index.

-------------------------------------------------------------
    => In internal css
        ->It is 1 to many(write a code 1 time and use many time)
        Syntax to write internal css?
        selector {
            property1: value1;
            property2: value2;
            property3: value3;
        }
        Example :-
            p {
                background: red;
                padding: 50px;
                float: left;
                margin: 30px;
            }

    =>  The css has given following method to write css 1 to many
        1. css for tag name    - example2.html
            Example :- 
                p{
                    background: orange;
                    float: left;
                    width: 20px;
                    height: 200px;
                }
        =============================================
        2. css for tag group   - example3.html
            Example :-
                h1, h2, p, b, label, div {
                    background: lightcoral;
                    font-size: 60px;
                    font-style: italic;
                }
        ==============================================
        3. css for id          - example4.html
            Example :-
                #block1 {
                    padding: 30px;
                    background: blue;
                    color: white;
                    font-size: 50px;
                    text-align: center;
                }
        ===============================================
        4. css for class       - example5.html
            Example :-
                .block2 {
                    margin: 2%;
                    width: 21%;
                    background: orange;
                    font-size: 40px;
                    text-align: center;
                    padding-top: 70px;
                    padding-bottom: 70px;
                    float: left;
                }
        ===============================================
        5. css for parent & child tag - example6.html
            Example :- 
                header ul li {
                    font-size: 25px;
                    color: white;
                    display: inline-block;
                    padding: 30px;
                }
        ================================================
        6. css for attribute          - example7.html
            Example :- 
                input[type='number'] 
                {
                    height: 30px;
                    width: 200px;
                    font-size: 20px;
                }
--------------------------------------------------------------
Continue of property & values
    -> border-radius
       border-radius: topleft topright bottomright bottomleft